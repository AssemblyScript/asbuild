"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AspectConfigFile = void 0;
var interfaces_1 = require("../interfaces");
var defaultConfig = "module.exports = {\n    /**\n     * A set of globs passed to the glob package that qualify typescript files for testing.\n     */\n    include: [\"assembly/__tests__/**/*.spec.ts\"],\n    /**\n     * A set of globs passed to the glob package that quality files to be added to each test.\n     */\n    add: [\"assembly/__tests__/**/*.include.ts\"],\n    /**\n     * All the compiler flags needed for this test suite. Make sure that a binary file is output.\n     */\n    flags: {\n      /** To output a wat file, uncomment the following line. */\n      // \"--textFile\": [\"output.wat\"],\n      /** A runtime must be provided here. */\n      \"--runtime\": [\"stub\"], // Acceptable values are: \"incremental\", \"minimal\", and \"stub\"\n    },\n    /**\n     * A set of regexp that will disclude source files from testing.\n     */\n    disclude: [/node_modules/],\n    /**\n     * Add your required AssemblyScript imports here.\n     */\n    imports(memory, createImports, instantiateSync, binary) {\n      let instance; // Imports can reference this\n      const myImports = {\n        // put your web assembly imports here, and return the module\n      };\n      instance = instantiateSync(binary, createImports(myImports));\n      return instance;\n    },\n    /**\n     * Add a custom reporter here if you want one. The following example is in typescript.\n     *\n     * @example\n     * import { TestReporter, TestGroup, TestResult, TestContext } from \"as-pect\";\n     *\n     * export class CustomReporter extends TestReporter {\n     *   // implement each abstract method here\n     *   public abstract onStart(suite: TestContext): void;\n     *   public abstract onGroupStart(group: TestGroup): void;\n     *   public abstract onGroupFinish(group: TestGroup): void;\n     *   public abstract onTestStart(group: TestGroup, result: TestResult): void;\n     *   public abstract onTestFinish(group: TestGroup, result: TestResult): void;\n     *   public abstract onFinish(suite: TestContext): void;\n     * }\n     */\n    // reporter: new CustomReporter(),\n    /**\n     * Specify if the binary wasm file should be written to the file system.\n     */\n    outputBinary: false,\n  };  \n";
var AspectConfigFile = /** @class */ (function (_super) {
    __extends(AspectConfigFile, _super);
    function AspectConfigFile() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.path = "as-pect.config.js";
        _this.updateOldContent = null;
        return _this;
    }
    AspectConfigFile.prototype.getContent = function () {
        return defaultConfig;
    };
    return AspectConfigFile;
}(interfaces_1.InitFile));
exports.AspectConfigFile = AspectConfigFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWNDb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvaW5pdC9maWxlcy9hc3BlY0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQXlDO0FBRXpDLElBQU0sYUFBYSxHQUFHLDBwRUF1RHJCLENBQUM7QUFFRjtJQUFzQyxvQ0FBUTtJQUE5QztRQUFBLHFFQU1DO1FBTEMsVUFBSSxHQUFHLG1CQUFtQixDQUFDO1FBSTNCLHNCQUFnQixHQUFHLElBQUksQ0FBQzs7SUFDMUIsQ0FBQztJQUpDLHFDQUFVLEdBQVY7UUFDRSxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUgsdUJBQUM7QUFBRCxDQUFDLEFBTkQsQ0FBc0MscUJBQVEsR0FNN0M7QUFOWSw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbml0RmlsZSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzXCI7XG5cbmNvbnN0IGRlZmF1bHRDb25maWcgPSBgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgZ2xvYnMgcGFzc2VkIHRvIHRoZSBnbG9iIHBhY2thZ2UgdGhhdCBxdWFsaWZ5IHR5cGVzY3JpcHQgZmlsZXMgZm9yIHRlc3RpbmcuXG4gICAgICovXG4gICAgaW5jbHVkZTogW1wiYXNzZW1ibHkvX190ZXN0c19fLyoqLyouc3BlYy50c1wiXSxcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiBnbG9icyBwYXNzZWQgdG8gdGhlIGdsb2IgcGFja2FnZSB0aGF0IHF1YWxpdHkgZmlsZXMgdG8gYmUgYWRkZWQgdG8gZWFjaCB0ZXN0LlxuICAgICAqL1xuICAgIGFkZDogW1wiYXNzZW1ibHkvX190ZXN0c19fLyoqLyouaW5jbHVkZS50c1wiXSxcbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIGNvbXBpbGVyIGZsYWdzIG5lZWRlZCBmb3IgdGhpcyB0ZXN0IHN1aXRlLiBNYWtlIHN1cmUgdGhhdCBhIGJpbmFyeSBmaWxlIGlzIG91dHB1dC5cbiAgICAgKi9cbiAgICBmbGFnczoge1xuICAgICAgLyoqIFRvIG91dHB1dCBhIHdhdCBmaWxlLCB1bmNvbW1lbnQgdGhlIGZvbGxvd2luZyBsaW5lLiAqL1xuICAgICAgLy8gXCItLXRleHRGaWxlXCI6IFtcIm91dHB1dC53YXRcIl0sXG4gICAgICAvKiogQSBydW50aW1lIG11c3QgYmUgcHJvdmlkZWQgaGVyZS4gKi9cbiAgICAgIFwiLS1ydW50aW1lXCI6IFtcInN0dWJcIl0sIC8vIEFjY2VwdGFibGUgdmFsdWVzIGFyZTogXCJpbmNyZW1lbnRhbFwiLCBcIm1pbmltYWxcIiwgYW5kIFwic3R1YlwiXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiByZWdleHAgdGhhdCB3aWxsIGRpc2NsdWRlIHNvdXJjZSBmaWxlcyBmcm9tIHRlc3RpbmcuXG4gICAgICovXG4gICAgZGlzY2x1ZGU6IFsvbm9kZV9tb2R1bGVzL10sXG4gICAgLyoqXG4gICAgICogQWRkIHlvdXIgcmVxdWlyZWQgQXNzZW1ibHlTY3JpcHQgaW1wb3J0cyBoZXJlLlxuICAgICAqL1xuICAgIGltcG9ydHMobWVtb3J5LCBjcmVhdGVJbXBvcnRzLCBpbnN0YW50aWF0ZVN5bmMsIGJpbmFyeSkge1xuICAgICAgbGV0IGluc3RhbmNlOyAvLyBJbXBvcnRzIGNhbiByZWZlcmVuY2UgdGhpc1xuICAgICAgY29uc3QgbXlJbXBvcnRzID0ge1xuICAgICAgICAvLyBwdXQgeW91ciB3ZWIgYXNzZW1ibHkgaW1wb3J0cyBoZXJlLCBhbmQgcmV0dXJuIHRoZSBtb2R1bGVcbiAgICAgIH07XG4gICAgICBpbnN0YW5jZSA9IGluc3RhbnRpYXRlU3luYyhiaW5hcnksIGNyZWF0ZUltcG9ydHMobXlJbXBvcnRzKSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBZGQgYSBjdXN0b20gcmVwb3J0ZXIgaGVyZSBpZiB5b3Ugd2FudCBvbmUuIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBpcyBpbiB0eXBlc2NyaXB0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpbXBvcnQgeyBUZXN0UmVwb3J0ZXIsIFRlc3RHcm91cCwgVGVzdFJlc3VsdCwgVGVzdENvbnRleHQgfSBmcm9tIFwiYXMtcGVjdFwiO1xuICAgICAqXG4gICAgICogZXhwb3J0IGNsYXNzIEN1c3RvbVJlcG9ydGVyIGV4dGVuZHMgVGVzdFJlcG9ydGVyIHtcbiAgICAgKiAgIC8vIGltcGxlbWVudCBlYWNoIGFic3RyYWN0IG1ldGhvZCBoZXJlXG4gICAgICogICBwdWJsaWMgYWJzdHJhY3Qgb25TdGFydChzdWl0ZTogVGVzdENvbnRleHQpOiB2b2lkO1xuICAgICAqICAgcHVibGljIGFic3RyYWN0IG9uR3JvdXBTdGFydChncm91cDogVGVzdEdyb3VwKTogdm9pZDtcbiAgICAgKiAgIHB1YmxpYyBhYnN0cmFjdCBvbkdyb3VwRmluaXNoKGdyb3VwOiBUZXN0R3JvdXApOiB2b2lkO1xuICAgICAqICAgcHVibGljIGFic3RyYWN0IG9uVGVzdFN0YXJ0KGdyb3VwOiBUZXN0R3JvdXAsIHJlc3VsdDogVGVzdFJlc3VsdCk6IHZvaWQ7XG4gICAgICogICBwdWJsaWMgYWJzdHJhY3Qgb25UZXN0RmluaXNoKGdyb3VwOiBUZXN0R3JvdXAsIHJlc3VsdDogVGVzdFJlc3VsdCk6IHZvaWQ7XG4gICAgICogICBwdWJsaWMgYWJzdHJhY3Qgb25GaW5pc2goc3VpdGU6IFRlc3RDb250ZXh0KTogdm9pZDtcbiAgICAgKiB9XG4gICAgICovXG4gICAgLy8gcmVwb3J0ZXI6IG5ldyBDdXN0b21SZXBvcnRlcigpLFxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgaWYgdGhlIGJpbmFyeSB3YXNtIGZpbGUgc2hvdWxkIGJlIHdyaXR0ZW4gdG8gdGhlIGZpbGUgc3lzdGVtLlxuICAgICAqL1xuICAgIG91dHB1dEJpbmFyeTogZmFsc2UsXG4gIH07ICBcbmA7XG5cbmV4cG9ydCBjbGFzcyBBc3BlY3RDb25maWdGaWxlIGV4dGVuZHMgSW5pdEZpbGUge1xuICBwYXRoID0gXCJhcy1wZWN0LmNvbmZpZy5qc1wiO1xuICBnZXRDb250ZW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRlZmF1bHRDb25maWc7XG4gIH1cbiAgdXBkYXRlT2xkQ29udGVudCA9IG51bGw7XG59XG4iXX0=