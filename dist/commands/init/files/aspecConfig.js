"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AspectConfigFile = void 0;
var interfaces_1 = require("../interfaces");
var defaultConfig = "module.exports = {\n    /**\n     * A set of globs passed to the glob package that qualify typescript files for testing.\n     */\n    include: [\"assembly/__tests__/**/*.spec.ts\"],\n    /**\n     * A set of globs passed to the glob package that quality files to be added to each test.\n     */\n    add: [\"assembly/__tests__/**/*.include.ts\"],\n    /**\n     * All the compiler flags needed for this test suite. Make sure that a binary file is output.\n     */\n    flags: {\n      /** To output a wat file, uncomment the following line. */\n      // \"--textFile\": [\"output.wat\"],\n      /** A runtime must be provided here. */\n      \"--runtime\": [\"stub\"], // Acceptable values are: \"incremental\", \"minimal\", and \"stub\"\n    },\n    /**\n     * A set of regexp that will disclude source files from testing.\n     */\n    disclude: [/node_modules/],\n    /**\n     * Add your required AssemblyScript imports here.\n     */\n    imports(memory, createImports, instantiateSync, binary) {\n      let instance; // Imports can reference this\n      const myImports = {\n        // put your web assembly imports here, and return the module\n      };\n      instance = instantiateSync(binary, createImports(myImports));\n      return instance;\n    },\n    /**\n     * Add a custom reporter here if you want one. The following example is in typescript.\n     *\n     * @example\n     * import { TestReporter, TestGroup, TestResult, TestContext } from \"as-pect\";\n     *\n     * export class CustomReporter extends TestReporter {\n     *   // implement each abstract method here\n     *   public abstract onStart(suite: TestContext): void;\n     *   public abstract onGroupStart(group: TestGroup): void;\n     *   public abstract onGroupFinish(group: TestGroup): void;\n     *   public abstract onTestStart(group: TestGroup, result: TestResult): void;\n     *   public abstract onTestFinish(group: TestGroup, result: TestResult): void;\n     *   public abstract onFinish(suite: TestContext): void;\n     * }\n     */\n    // reporter: new CustomReporter(),\n    /**\n     * Specify if the binary wasm file should be written to the file system.\n     */\n    outputBinary: false,\n  };  \n";
var AspectConfigFile = /** @class */ (function (_super) {
    __extends(AspectConfigFile, _super);
    function AspectConfigFile() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.path = "as-pect.config.js";
        _this.description = "Configuration file for as-pect tests";
        _this.updateOldContent = null;
        return _this;
    }
    AspectConfigFile.prototype.getContent = function () {
        return defaultConfig;
    };
    return AspectConfigFile;
}(interfaces_1.InitFile));
exports.AspectConfigFile = AspectConfigFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNwZWNDb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvaW5pdC9maWxlcy9hc3BlY0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQXlDO0FBRXpDLElBQU0sYUFBYSxHQUFHLDBwRUF1RHJCLENBQUM7QUFFRjtJQUFzQyxvQ0FBUTtJQUE5QztRQUFBLHFFQU9DO1FBTkMsVUFBSSxHQUFHLG1CQUFtQixDQUFDO1FBQzNCLGlCQUFXLEdBQUcsc0NBQXNDLENBQUM7UUFJckQsc0JBQWdCLEdBQUcsSUFBSSxDQUFDOztJQUMxQixDQUFDO0lBSkMscUNBQVUsR0FBVjtRQUNFLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFSCx1QkFBQztBQUFELENBQUMsQUFQRCxDQUFzQyxxQkFBUSxHQU83QztBQVBZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluaXRGaWxlIH0gZnJvbSBcIi4uL2ludGVyZmFjZXNcIjtcblxuY29uc3QgZGVmYXVsdENvbmZpZyA9IGBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiBnbG9icyBwYXNzZWQgdG8gdGhlIGdsb2IgcGFja2FnZSB0aGF0IHF1YWxpZnkgdHlwZXNjcmlwdCBmaWxlcyBmb3IgdGVzdGluZy5cbiAgICAgKi9cbiAgICBpbmNsdWRlOiBbXCJhc3NlbWJseS9fX3Rlc3RzX18vKiovKi5zcGVjLnRzXCJdLFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIGdsb2JzIHBhc3NlZCB0byB0aGUgZ2xvYiBwYWNrYWdlIHRoYXQgcXVhbGl0eSBmaWxlcyB0byBiZSBhZGRlZCB0byBlYWNoIHRlc3QuXG4gICAgICovXG4gICAgYWRkOiBbXCJhc3NlbWJseS9fX3Rlc3RzX18vKiovKi5pbmNsdWRlLnRzXCJdLFxuICAgIC8qKlxuICAgICAqIEFsbCB0aGUgY29tcGlsZXIgZmxhZ3MgbmVlZGVkIGZvciB0aGlzIHRlc3Qgc3VpdGUuIE1ha2Ugc3VyZSB0aGF0IGEgYmluYXJ5IGZpbGUgaXMgb3V0cHV0LlxuICAgICAqL1xuICAgIGZsYWdzOiB7XG4gICAgICAvKiogVG8gb3V0cHV0IGEgd2F0IGZpbGUsIHVuY29tbWVudCB0aGUgZm9sbG93aW5nIGxpbmUuICovXG4gICAgICAvLyBcIi0tdGV4dEZpbGVcIjogW1wib3V0cHV0LndhdFwiXSxcbiAgICAgIC8qKiBBIHJ1bnRpbWUgbXVzdCBiZSBwcm92aWRlZCBoZXJlLiAqL1xuICAgICAgXCItLXJ1bnRpbWVcIjogW1wic3R1YlwiXSwgLy8gQWNjZXB0YWJsZSB2YWx1ZXMgYXJlOiBcImluY3JlbWVudGFsXCIsIFwibWluaW1hbFwiLCBhbmQgXCJzdHViXCJcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHJlZ2V4cCB0aGF0IHdpbGwgZGlzY2x1ZGUgc291cmNlIGZpbGVzIGZyb20gdGVzdGluZy5cbiAgICAgKi9cbiAgICBkaXNjbHVkZTogWy9ub2RlX21vZHVsZXMvXSxcbiAgICAvKipcbiAgICAgKiBBZGQgeW91ciByZXF1aXJlZCBBc3NlbWJseVNjcmlwdCBpbXBvcnRzIGhlcmUuXG4gICAgICovXG4gICAgaW1wb3J0cyhtZW1vcnksIGNyZWF0ZUltcG9ydHMsIGluc3RhbnRpYXRlU3luYywgYmluYXJ5KSB7XG4gICAgICBsZXQgaW5zdGFuY2U7IC8vIEltcG9ydHMgY2FuIHJlZmVyZW5jZSB0aGlzXG4gICAgICBjb25zdCBteUltcG9ydHMgPSB7XG4gICAgICAgIC8vIHB1dCB5b3VyIHdlYiBhc3NlbWJseSBpbXBvcnRzIGhlcmUsIGFuZCByZXR1cm4gdGhlIG1vZHVsZVxuICAgICAgfTtcbiAgICAgIGluc3RhbmNlID0gaW5zdGFudGlhdGVTeW5jKGJpbmFyeSwgY3JlYXRlSW1wb3J0cyhteUltcG9ydHMpKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFkZCBhIGN1c3RvbSByZXBvcnRlciBoZXJlIGlmIHlvdSB3YW50IG9uZS4gVGhlIGZvbGxvd2luZyBleGFtcGxlIGlzIGluIHR5cGVzY3JpcHQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGltcG9ydCB7IFRlc3RSZXBvcnRlciwgVGVzdEdyb3VwLCBUZXN0UmVzdWx0LCBUZXN0Q29udGV4dCB9IGZyb20gXCJhcy1wZWN0XCI7XG4gICAgICpcbiAgICAgKiBleHBvcnQgY2xhc3MgQ3VzdG9tUmVwb3J0ZXIgZXh0ZW5kcyBUZXN0UmVwb3J0ZXIge1xuICAgICAqICAgLy8gaW1wbGVtZW50IGVhY2ggYWJzdHJhY3QgbWV0aG9kIGhlcmVcbiAgICAgKiAgIHB1YmxpYyBhYnN0cmFjdCBvblN0YXJ0KHN1aXRlOiBUZXN0Q29udGV4dCk6IHZvaWQ7XG4gICAgICogICBwdWJsaWMgYWJzdHJhY3Qgb25Hcm91cFN0YXJ0KGdyb3VwOiBUZXN0R3JvdXApOiB2b2lkO1xuICAgICAqICAgcHVibGljIGFic3RyYWN0IG9uR3JvdXBGaW5pc2goZ3JvdXA6IFRlc3RHcm91cCk6IHZvaWQ7XG4gICAgICogICBwdWJsaWMgYWJzdHJhY3Qgb25UZXN0U3RhcnQoZ3JvdXA6IFRlc3RHcm91cCwgcmVzdWx0OiBUZXN0UmVzdWx0KTogdm9pZDtcbiAgICAgKiAgIHB1YmxpYyBhYnN0cmFjdCBvblRlc3RGaW5pc2goZ3JvdXA6IFRlc3RHcm91cCwgcmVzdWx0OiBUZXN0UmVzdWx0KTogdm9pZDtcbiAgICAgKiAgIHB1YmxpYyBhYnN0cmFjdCBvbkZpbmlzaChzdWl0ZTogVGVzdENvbnRleHQpOiB2b2lkO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICAvLyByZXBvcnRlcjogbmV3IEN1c3RvbVJlcG9ydGVyKCksXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBpZiB0aGUgYmluYXJ5IHdhc20gZmlsZSBzaG91bGQgYmUgd3JpdHRlbiB0byB0aGUgZmlsZSBzeXN0ZW0uXG4gICAgICovXG4gICAgb3V0cHV0QmluYXJ5OiBmYWxzZSxcbiAgfTsgIFxuYDtcblxuZXhwb3J0IGNsYXNzIEFzcGVjdENvbmZpZ0ZpbGUgZXh0ZW5kcyBJbml0RmlsZSB7XG4gIHBhdGggPSBcImFzLXBlY3QuY29uZmlnLmpzXCI7XG4gIGRlc2NyaXB0aW9uID0gXCJDb25maWd1cmF0aW9uIGZpbGUgZm9yIGFzLXBlY3QgdGVzdHNcIjtcbiAgZ2V0Q29udGVudCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBkZWZhdWx0Q29uZmlnO1xuICB9XG4gIHVwZGF0ZU9sZENvbnRlbnQgPSBudWxsO1xufVxuIl19